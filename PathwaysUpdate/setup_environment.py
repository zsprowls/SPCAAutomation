#!/usr/bin/env python3
"""
Environment Setup Script for Pathways for Care Viewer
This script helps you set up environment variables securely.
"""

import os
import json
from pathlib import Path

def setup_environment():
    """Interactive setup for environment variables"""
    print("üîê Pathways for Care Viewer - Environment Setup")
    print("=" * 50)
    print()
    print("This script will help you set up your environment variables securely.")
    print("Your credentials will be saved to a .env file that is NOT committed to git.")
    print()
    
    # Check if .env already exists
    env_file = Path('.env')
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Get Cloud SQL credentials
    print("\nüåê Cloud SQL Database Configuration")
    print("-" * 30)
    
    cloud_config = {}
    cloud_config['CLOUD_SQL_INSTANCE_NAME'] = input("Instance Name: ").strip()
    cloud_config['CLOUD_SQL_DATABASE_NAME'] = input("Database Name: ").strip()
    cloud_config['CLOUD_SQL_USER'] = input("Username: ").strip()
    cloud_config['CLOUD_SQL_PASSWORD'] = input("Password: ").strip()
    cloud_config['CLOUD_SQL_HOST'] = input("Host IP: ").strip()
    cloud_config['CLOUD_SQL_PORT'] = input("Port (default 3306): ").strip() or "3306"
    
    # Get PetPoint credentials (optional)
    print("\nüêæ PetPoint Credentials (optional - for image scraping)")
    print("-" * 45)
    
    petpoint_config = {}
    petpoint_config['PETPOINT_SHELTER_ID'] = input("Shelter ID (default USNY9): ").strip() or "USNY9"
    petpoint_config['PETPOINT_USERNAME'] = input("Username (default zaks): ").strip() or "zaks"
    petpoint_config['PETPOINT_PASSWORD'] = input("Password: ").strip()
    
    # Combine all config
    all_config = {**cloud_config, **petpoint_config}
    
    # Write to .env file
    try:
        with open('.env', 'w') as f:
            f.write("# Cloud SQL Database Configuration\n")
            f.write("# Generated by setup_environment.py\n")
            f.write("# DO NOT commit this file to version control\n\n")
            
            for key, value in all_config.items():
                f.write(f"{key}={value}\n")
        
        print(f"\n‚úÖ Environment variables saved to .env")
        print("üîí This file is protected by .gitignore and will not be committed to git.")
        
        # Test the configuration
        print("\nüß™ Testing configuration...")
        test_connection(all_config)
        
    except Exception as e:
        print(f"‚ùå Error saving .env file: {e}")

def test_connection(config):
    """Test the database connection"""
    try:
        import pymysql
        
        print("Testing Cloud SQL connection...")
        connection = pymysql.connect(
            host=config['CLOUD_SQL_HOST'],
            port=int(config['CLOUD_SQL_PORT']),
            user=config['CLOUD_SQL_USER'],
            password=config['CLOUD_SQL_PASSWORD'],
            database=config['CLOUD_SQL_DATABASE_NAME'],
            charset='utf8mb4'
        )
        
        print("‚úÖ Database connection successful!")
        connection.close()
        
    except ImportError:
        print("‚ö†Ô∏è  pymysql not installed. Install with: pip install pymysql")
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        print("Please check your credentials and try again.")

def load_existing_config():
    """Load existing configuration from cloud_config.json if it exists"""
    config_file = Path('cloud_config.json')
    if config_file.exists():
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
            
            print("üìÅ Found existing cloud_config.json")
            print("This file contains sensitive credentials and should be removed.")
            print("The setup script will help you migrate to environment variables.")
            
            return config.get('cloud_sql', {})
        except Exception as e:
            print(f"Error reading existing config: {e}")
    
    return {}

if __name__ == "__main__":
    # Check for existing config
    existing_config = load_existing_config()
    
    if existing_config:
        print("\nüîÑ Found existing configuration:")
        for key, value in existing_config.items():
            if key == 'password':
                print(f"  {key}: {'*' * len(str(value))}")
            else:
                print(f"  {key}: {value}")
        
        migrate = input("\nDo you want to migrate to environment variables? (Y/n): ").lower().strip()
        if migrate != 'n':
            setup_environment()
            
            # Remove the old config file
            try:
                os.remove('cloud_config.json')
                print("\nüóëÔ∏è  Removed cloud_config.json (credentials now in .env)")
            except Exception as e:
                print(f"‚ö†Ô∏è  Could not remove cloud_config.json: {e}")
        else:
            print("Setup cancelled.")
    else:
        setup_environment() 